# Example config file - ugated uses the current directory, and in IDEs the default is the same as the binary.
# 'testdata' has more configs, including a test CA.
#
#


## Port-based listeners.
# - 'whitebox' egress - listen on 127.0.0.1, forwardTo
# - forward: listen on :port, forwardTo dest
# - 'input': listen on :port, forwardTo localhost or empty

# Hosts represents pre-configured nodes.
# Key is the DNS name or VIP.
# If a host is not found here, discovery will be used ( DNS, control plane)
hosts:
  localiperf:
    addr: localhost:15102

  # Live test server
  h.webinf.info:
    addr: h.webinf.info:443
#    id: B5B6KYYUBVKCX4PWPWSWAIHW2X2D3Q4HZPJYWZ6UECL2PAODHTFA
#
#  c1.webinf.info:
#    addr: c1.webinf.info:15007

# Remote accept request (reverse forward, "-R")
# Will also include relays, stun, etc.
# TODO: could also be part of the hosts: definition, include a list
# of ports. This way we don't dup the public key.
remoteAccept:
  h.webinf.info: "B5B6KYYUBVKCX4PWPWSWAIHW2X2D3Q4HZPJYWZ6UECL2PAODHTFA"

  c1.webinf.info: ""

# If using K8S for token auth. If a cert is missing this will also be used
# with Citadel.
#
# If a cert is provisioned, will be extracted from the cert.
# namespace: test
# serviceaccount: default


clusters:
  # Special cluster name used for XDS config.
  # If set XDS will be used. If not set, but if a default k8s cluster is found
  # a request for istio-system/mesh-env config map is made to get the address
  # and istiod certificate, as well as additional settings for GCP.
  # This can include a cacert - but if certs are provisioned, the workload identity root
  # will be used.
#  istiod.istio-system.svc:15012:
#    addr: 34.69.72.163:15012
#    tokenSource: istio-ca
#

  example.test.svc:8080:
    id: example.test.svc:8080
    addr: 1.2.3.4:8080

  # Alternative way to configure K8S GKE clusters.
  # By default .kube/config and KUBECONFIG will be used to create k8s clusters.
  # A cluster named "k8s" will be set as the default cluster and used for k8s tokens.
#  gke_PROJECTID_LOCATION_CLUSTER:
#    # certificate-authority-data:
#    cacert: |
#      -----BEGIN CERTIFICATE-----
#      MII...
#      -----END CERTIFICATE-----
#    addr: ...
#    # Extracted from the Secret.
#    token: Bearer ....
basePort: 13000

dst:
  # Key is used a FQDN, if not explicitly configured
  # If VIP is missing - it can be resolved via DNS.

  # A service.
  echo.svc.mymesh.internal:
    vip:
      - "10.1.1.10"

  # A host
  echo.w.mymesh.internal:
    addr: "127.0.0.1" # :14010

# All possible listeners
listeners:

  # ======== Egress
  # Local traffic, will send to original dst or secure depending on dst.

  tpudp:
    port: 14002
    protocol: tproxy_udp

  socks:
    port: 14003
    protocol: socks

  tproxy:
    port: 14006
    protocol: tproxy

  httpproxy:
    port: 14005
    protocol: http_proxy

  # ======= HBone / multiplexed ingress

  # SSH-secured inbound connections
  # Will forward to local ports just like HBone.
  ssh:
    port: 14022
    protocol: ssh

  # Plain text HTTP/2
  hbonec:
    port: 14001
    protocol: hbonec

  # Plain text HTTP/1.1
  hbone1:
    port: 14004
    protocol: hbone1

  # TLS - H2 or H1
  hbone:
    port: 14008
    protocol: hbone

  # ======= Admin/debug port
  admin:
    port: 14000
    protocol: admin

  # ======== Regular listeners
  udp:
    port: 14009
    protocol: udp

  mqtt:
    port: 14009
    protocol: mqtt

  echo:
    port: 14010
    protocol: echo


  ipfs:
    port: 14011
    protocol: ipfs
