// Copyright 2018 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: grpc/lb/v1/load_reporter.proto

package lb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InitialLoadReportResponse_ImplementationIdentifier int32

const (
	InitialLoadReportResponse_IMPL_UNSPECIFIED InitialLoadReportResponse_ImplementationIdentifier = 0
	InitialLoadReportResponse_CPP              InitialLoadReportResponse_ImplementationIdentifier = 1 // Standard Google C++ implementation.
	InitialLoadReportResponse_JAVA             InitialLoadReportResponse_ImplementationIdentifier = 2 // Standard Google Java implementation.
	InitialLoadReportResponse_GO               InitialLoadReportResponse_ImplementationIdentifier = 3 // Standard Google Go implementation.
)

// Enum value maps for InitialLoadReportResponse_ImplementationIdentifier.
var (
	InitialLoadReportResponse_ImplementationIdentifier_name = map[int32]string{
		0: "IMPL_UNSPECIFIED",
		1: "CPP",
		2: "JAVA",
		3: "GO",
	}
	InitialLoadReportResponse_ImplementationIdentifier_value = map[string]int32{
		"IMPL_UNSPECIFIED": 0,
		"CPP":              1,
		"JAVA":             2,
		"GO":               3,
	}
)

func (x InitialLoadReportResponse_ImplementationIdentifier) Enum() *InitialLoadReportResponse_ImplementationIdentifier {
	p := new(InitialLoadReportResponse_ImplementationIdentifier)
	*p = x
	return p
}

func (x InitialLoadReportResponse_ImplementationIdentifier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InitialLoadReportResponse_ImplementationIdentifier) Descriptor() protoreflect.EnumDescriptor {
	return file_grpc_lb_v1_load_reporter_proto_enumTypes[0].Descriptor()
}

func (InitialLoadReportResponse_ImplementationIdentifier) Type() protoreflect.EnumType {
	return &file_grpc_lb_v1_load_reporter_proto_enumTypes[0]
}

func (x InitialLoadReportResponse_ImplementationIdentifier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InitialLoadReportResponse_ImplementationIdentifier.Descriptor instead.
func (InitialLoadReportResponse_ImplementationIdentifier) EnumDescriptor() ([]byte, []int) {
	return file_grpc_lb_v1_load_reporter_proto_rawDescGZIP(), []int{3, 0}
}

type LoadReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This message should be sent on the first request to the gRPC server.
	InitialRequest *InitialLoadReportRequest `protobuf:"bytes,1,opt,name=initial_request,json=initialRequest,proto3" json:"initial_request,omitempty"`
}

func (x *LoadReportRequest) Reset() {
	*x = LoadReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_lb_v1_load_reporter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadReportRequest) ProtoMessage() {}

func (x *LoadReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_lb_v1_load_reporter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadReportRequest.ProtoReflect.Descriptor instead.
func (*LoadReportRequest) Descriptor() ([]byte, []int) {
	return file_grpc_lb_v1_load_reporter_proto_rawDescGZIP(), []int{0}
}

func (x *LoadReportRequest) GetInitialRequest() *InitialLoadReportRequest {
	if x != nil {
		return x.InitialRequest
	}
	return nil
}

type InitialLoadReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hostname this load reporter client is requesting load for.
	LoadBalancedHostname string `protobuf:"bytes,1,opt,name=load_balanced_hostname,json=loadBalancedHostname,proto3" json:"load_balanced_hostname,omitempty"`
	// Additional information to disambiguate orphaned load: load that should have
	// gone to this load reporter client, but was not able to be sent since the
	// load reporter client has disconnected. load_key is sent in orphaned load
	// reports; see Load.load_key.
	LoadKey []byte `protobuf:"bytes,2,opt,name=load_key,json=loadKey,proto3" json:"load_key,omitempty"`
	// This interval defines how often the server should send load reports to
	// the load balancer.
	LoadReportInterval *durationpb.Duration `protobuf:"bytes,3,opt,name=load_report_interval,json=loadReportInterval,proto3" json:"load_report_interval,omitempty"`
}

func (x *InitialLoadReportRequest) Reset() {
	*x = InitialLoadReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_lb_v1_load_reporter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitialLoadReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitialLoadReportRequest) ProtoMessage() {}

func (x *InitialLoadReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_lb_v1_load_reporter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitialLoadReportRequest.ProtoReflect.Descriptor instead.
func (*InitialLoadReportRequest) Descriptor() ([]byte, []int) {
	return file_grpc_lb_v1_load_reporter_proto_rawDescGZIP(), []int{1}
}

func (x *InitialLoadReportRequest) GetLoadBalancedHostname() string {
	if x != nil {
		return x.LoadBalancedHostname
	}
	return ""
}

func (x *InitialLoadReportRequest) GetLoadKey() []byte {
	if x != nil {
		return x.LoadKey
	}
	return nil
}

func (x *InitialLoadReportRequest) GetLoadReportInterval() *durationpb.Duration {
	if x != nil {
		return x.LoadReportInterval
	}
	return nil
}

type LoadReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This message should be sent on the first response to the load balancer.
	InitialResponse *InitialLoadReportResponse `protobuf:"bytes,1,opt,name=initial_response,json=initialResponse,proto3" json:"initial_response,omitempty"`
	// Reports server-wide statistics for load balancing.
	// This should be reported with every response.
	LoadBalancingFeedback *LoadBalancingFeedback `protobuf:"bytes,2,opt,name=load_balancing_feedback,json=loadBalancingFeedback,proto3" json:"load_balancing_feedback,omitempty"`
	// A load report for each <tag, user_id> tuple. This could be considered to be
	// a multimap indexed by <tag, user_id>. It is not strictly necessary to
	// aggregate all entries into one entry per <tag, user_id> tuple, although it
	// is preferred to do so.
	Load []*Load `protobuf:"bytes,3,rep,name=load,proto3" json:"load,omitempty"`
}

func (x *LoadReportResponse) Reset() {
	*x = LoadReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_lb_v1_load_reporter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadReportResponse) ProtoMessage() {}

func (x *LoadReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_lb_v1_load_reporter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadReportResponse.ProtoReflect.Descriptor instead.
func (*LoadReportResponse) Descriptor() ([]byte, []int) {
	return file_grpc_lb_v1_load_reporter_proto_rawDescGZIP(), []int{2}
}

func (x *LoadReportResponse) GetInitialResponse() *InitialLoadReportResponse {
	if x != nil {
		return x.InitialResponse
	}
	return nil
}

func (x *LoadReportResponse) GetLoadBalancingFeedback() *LoadBalancingFeedback {
	if x != nil {
		return x.LoadBalancingFeedback
	}
	return nil
}

func (x *LoadReportResponse) GetLoad() []*Load {
	if x != nil {
		return x.Load
	}
	return nil
}

type InitialLoadReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Initial response returns the Load balancer WorkloadID. This must be plain text
	// (printable ASCII).
	LoadBalancerId string `protobuf:"bytes,1,opt,name=load_balancer_id,json=loadBalancerId,proto3" json:"load_balancer_id,omitempty"`
	// Optional identifier of this implementation of the load reporting server.
	ImplementationId InitialLoadReportResponse_ImplementationIdentifier `protobuf:"varint,2,opt,name=implementation_id,json=implementationId,proto3,enum=grpc.lb.v1.InitialLoadReportResponse_ImplementationIdentifier" json:"implementation_id,omitempty"`
	// Optional server_version should be a value that is modified (and
	// monotonically increased) when changes are made to the server
	// implementation.
	ServerVersion int64 `protobuf:"varint,3,opt,name=server_version,json=serverVersion,proto3" json:"server_version,omitempty"`
}

func (x *InitialLoadReportResponse) Reset() {
	*x = InitialLoadReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_lb_v1_load_reporter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitialLoadReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitialLoadReportResponse) ProtoMessage() {}

func (x *InitialLoadReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_lb_v1_load_reporter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitialLoadReportResponse.ProtoReflect.Descriptor instead.
func (*InitialLoadReportResponse) Descriptor() ([]byte, []int) {
	return file_grpc_lb_v1_load_reporter_proto_rawDescGZIP(), []int{3}
}

func (x *InitialLoadReportResponse) GetLoadBalancerId() string {
	if x != nil {
		return x.LoadBalancerId
	}
	return ""
}

func (x *InitialLoadReportResponse) GetImplementationId() InitialLoadReportResponse_ImplementationIdentifier {
	if x != nil {
		return x.ImplementationId
	}
	return InitialLoadReportResponse_IMPL_UNSPECIFIED
}

func (x *InitialLoadReportResponse) GetServerVersion() int64 {
	if x != nil {
		return x.ServerVersion
	}
	return 0
}

type LoadBalancingFeedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reports the current utilization of the server (typical range [0.0 - 1.0]).
	ServerUtilization float32 `protobuf:"fixed32,1,opt,name=server_utilization,json=serverUtilization,proto3" json:"server_utilization,omitempty"`
	// The total rate of calls handled by this server (including errors).
	CallsPerSecond float32 `protobuf:"fixed32,2,opt,name=calls_per_second,json=callsPerSecond,proto3" json:"calls_per_second,omitempty"`
	// The total rate of error responses sent by this server.
	ErrorsPerSecond float32 `protobuf:"fixed32,3,opt,name=errors_per_second,json=errorsPerSecond,proto3" json:"errors_per_second,omitempty"`
}

func (x *LoadBalancingFeedback) Reset() {
	*x = LoadBalancingFeedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_lb_v1_load_reporter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancingFeedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancingFeedback) ProtoMessage() {}

func (x *LoadBalancingFeedback) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_lb_v1_load_reporter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancingFeedback.ProtoReflect.Descriptor instead.
func (*LoadBalancingFeedback) Descriptor() ([]byte, []int) {
	return file_grpc_lb_v1_load_reporter_proto_rawDescGZIP(), []int{4}
}

func (x *LoadBalancingFeedback) GetServerUtilization() float32 {
	if x != nil {
		return x.ServerUtilization
	}
	return 0
}

func (x *LoadBalancingFeedback) GetCallsPerSecond() float32 {
	if x != nil {
		return x.CallsPerSecond
	}
	return 0
}

func (x *LoadBalancingFeedback) GetErrorsPerSecond() float32 {
	if x != nil {
		return x.ErrorsPerSecond
	}
	return 0
}

type Load struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The (plain text) tag used by the calls covered by this load report. The
	// tag is that part of the load balancer token after removing the load
	// balancer id. Empty is equivalent to non-existent tag.
	LoadBalanceTag string `protobuf:"bytes,1,opt,name=load_balance_tag,json=loadBalanceTag,proto3" json:"load_balance_tag,omitempty"`
	// The user identity authenticated by the calls covered by this load
	// report. Empty is equivalent to no known user_id.
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// IP address of the client that sent these requests, serialized in
	// network-byte-order. It may either be an IPv4 or IPv6 address.
	ClientIpAddress []byte `protobuf:"bytes,15,opt,name=client_ip_address,json=clientIpAddress,proto3" json:"client_ip_address,omitempty"`
	// The number of calls started (since the last report) with the given tag and
	// user_id.
	NumCallsStarted int64 `protobuf:"varint,4,opt,name=num_calls_started,json=numCallsStarted,proto3" json:"num_calls_started,omitempty"`
	// Indicates whether this load report is an in-progress load report in which
	// num_calls_in_progress is the only valid entry. If in_progress_report is not
	// set, num_calls_in_progress will be ignored. If in_progress_report is set,
	// fields other than num_calls_in_progress and orphaned_load will be ignored.
	// TODO(juanlishen): A Load is either an in_progress_report or not. We should
	// make this explicit in hierarchy. From the log, I see in_progress_report_
	// has a random num_calls_in_progress_ when not set, which might lead to bug
	// when the balancer process the load report.
	//
	// Types that are assignable to InProgressReport:
	//	*Load_NumCallsInProgress
	InProgressReport isLoad_InProgressReport `protobuf_oneof:"in_progress_report"`
	// The following values are counts or totals of call statistics that finished
	// with the given tag and user_id.
	NumCallsFinishedWithoutError int64 `protobuf:"varint,6,opt,name=num_calls_finished_without_error,json=numCallsFinishedWithoutError,proto3" json:"num_calls_finished_without_error,omitempty"` // Calls with status OK.
	NumCallsFinishedWithError    int64 `protobuf:"varint,7,opt,name=num_calls_finished_with_error,json=numCallsFinishedWithError,proto3" json:"num_calls_finished_with_error,omitempty"`          // Calls with status non-OK.
	// Calls that finished with a status that maps to HTTP 5XX (see
	// googleapis/google/rpc/code.proto). Note that this is a subset of
	// num_calls_finished_with_error.
	NumCallsFinishedWithServerError int64 `protobuf:"varint,16,opt,name=num_calls_finished_with_server_error,json=numCallsFinishedWithServerError,proto3" json:"num_calls_finished_with_server_error,omitempty"`
	// Totals are from calls that with _and_ without error.
	TotalBytesSent     int64                `protobuf:"varint,8,opt,name=total_bytes_sent,json=totalBytesSent,proto3" json:"total_bytes_sent,omitempty"`
	TotalBytesReceived int64                `protobuf:"varint,9,opt,name=total_bytes_received,json=totalBytesReceived,proto3" json:"total_bytes_received,omitempty"`
	TotalLatency       *durationpb.Duration `protobuf:"bytes,10,opt,name=total_latency,json=totalLatency,proto3" json:"total_latency,omitempty"`
	// Optional metrics reported for the call(s). Requires that metric_name is
	// unique.
	MetricData []*CallMetricData `protobuf:"bytes,11,rep,name=metric_data,json=metricData,proto3" json:"metric_data,omitempty"`
	// The following two fields are used for reporting orphaned load: load that
	// could not be reported to the originating balancer either since the balancer
	// is no longer connected or because the frontend sent an invalid token. These
	// fields must not be set with normal (unorphaned) load reports.
	//
	// Types that are assignable to OrphanedLoad:
	//	*Load_LoadKey
	//	*Load_LoadKeyUnknown
	//	*Load_OrphanedLoadIdentifier
	OrphanedLoad isLoad_OrphanedLoad `protobuf_oneof:"orphaned_load"`
}

func (x *Load) Reset() {
	*x = Load{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_lb_v1_load_reporter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Load) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Load) ProtoMessage() {}

func (x *Load) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_lb_v1_load_reporter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Load.ProtoReflect.Descriptor instead.
func (*Load) Descriptor() ([]byte, []int) {
	return file_grpc_lb_v1_load_reporter_proto_rawDescGZIP(), []int{5}
}

func (x *Load) GetLoadBalanceTag() string {
	if x != nil {
		return x.LoadBalanceTag
	}
	return ""
}

func (x *Load) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Load) GetClientIpAddress() []byte {
	if x != nil {
		return x.ClientIpAddress
	}
	return nil
}

func (x *Load) GetNumCallsStarted() int64 {
	if x != nil {
		return x.NumCallsStarted
	}
	return 0
}

func (m *Load) GetInProgressReport() isLoad_InProgressReport {
	if m != nil {
		return m.InProgressReport
	}
	return nil
}

func (x *Load) GetNumCallsInProgress() int64 {
	if x, ok := x.GetInProgressReport().(*Load_NumCallsInProgress); ok {
		return x.NumCallsInProgress
	}
	return 0
}

func (x *Load) GetNumCallsFinishedWithoutError() int64 {
	if x != nil {
		return x.NumCallsFinishedWithoutError
	}
	return 0
}

func (x *Load) GetNumCallsFinishedWithError() int64 {
	if x != nil {
		return x.NumCallsFinishedWithError
	}
	return 0
}

func (x *Load) GetNumCallsFinishedWithServerError() int64 {
	if x != nil {
		return x.NumCallsFinishedWithServerError
	}
	return 0
}

func (x *Load) GetTotalBytesSent() int64 {
	if x != nil {
		return x.TotalBytesSent
	}
	return 0
}

func (x *Load) GetTotalBytesReceived() int64 {
	if x != nil {
		return x.TotalBytesReceived
	}
	return 0
}

func (x *Load) GetTotalLatency() *durationpb.Duration {
	if x != nil {
		return x.TotalLatency
	}
	return nil
}

func (x *Load) GetMetricData() []*CallMetricData {
	if x != nil {
		return x.MetricData
	}
	return nil
}

func (m *Load) GetOrphanedLoad() isLoad_OrphanedLoad {
	if m != nil {
		return m.OrphanedLoad
	}
	return nil
}

// Deprecated: Do not use.
func (x *Load) GetLoadKey() []byte {
	if x, ok := x.GetOrphanedLoad().(*Load_LoadKey); ok {
		return x.LoadKey
	}
	return nil
}

func (x *Load) GetLoadKeyUnknown() bool {
	if x, ok := x.GetOrphanedLoad().(*Load_LoadKeyUnknown); ok {
		return x.LoadKeyUnknown
	}
	return false
}

func (x *Load) GetOrphanedLoadIdentifier() *OrphanedLoadIdentifier {
	if x, ok := x.GetOrphanedLoad().(*Load_OrphanedLoadIdentifier); ok {
		return x.OrphanedLoadIdentifier
	}
	return nil
}

type isLoad_InProgressReport interface {
	isLoad_InProgressReport()
}

type Load_NumCallsInProgress struct {
	// The number of calls in progress (instantaneously) per load balancer id.
	NumCallsInProgress int64 `protobuf:"varint,5,opt,name=num_calls_in_progress,json=numCallsInProgress,proto3,oneof"`
}

func (*Load_NumCallsInProgress) isLoad_InProgressReport() {}

type isLoad_OrphanedLoad interface {
	isLoad_OrphanedLoad()
}

type Load_LoadKey struct {
	// Load_key is the load_key from the initial_request from the originating
	// balancer.
	//
	// Deprecated: Do not use.
	LoadKey []byte `protobuf:"bytes,12,opt,name=load_key,json=loadKey,proto3,oneof"`
}

type Load_LoadKeyUnknown struct {
	// If true then this load report is for calls that had an invalid token; the
	// user is probably abusing the gRPC protocol.
	// TODO(yankaiz): Rename load_key_unknown.
	LoadKeyUnknown bool `protobuf:"varint,13,opt,name=load_key_unknown,json=loadKeyUnknown,proto3,oneof"`
}

type Load_OrphanedLoadIdentifier struct {
	// load_key and balancer_id are included in order to identify orphaned load
	// from different origins.
	OrphanedLoadIdentifier *OrphanedLoadIdentifier `protobuf:"bytes,14,opt,name=orphaned_load_identifier,json=orphanedLoadIdentifier,proto3,oneof"`
}

func (*Load_LoadKey) isLoad_OrphanedLoad() {}

func (*Load_LoadKeyUnknown) isLoad_OrphanedLoad() {}

func (*Load_OrphanedLoadIdentifier) isLoad_OrphanedLoad() {}

type CallMetricData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the metric; may be empty.
	MetricName string `protobuf:"bytes,1,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	// Number of calls that finished and included this metric.
	NumCallsFinishedWithMetric int64 `protobuf:"varint,2,opt,name=num_calls_finished_with_metric,json=numCallsFinishedWithMetric,proto3" json:"num_calls_finished_with_metric,omitempty"`
	// Sum of metric values across all calls that finished with this metric.
	TotalMetricValue float64 `protobuf:"fixed64,3,opt,name=total_metric_value,json=totalMetricValue,proto3" json:"total_metric_value,omitempty"`
}

func (x *CallMetricData) Reset() {
	*x = CallMetricData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_lb_v1_load_reporter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallMetricData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallMetricData) ProtoMessage() {}

func (x *CallMetricData) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_lb_v1_load_reporter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallMetricData.ProtoReflect.Descriptor instead.
func (*CallMetricData) Descriptor() ([]byte, []int) {
	return file_grpc_lb_v1_load_reporter_proto_rawDescGZIP(), []int{6}
}

func (x *CallMetricData) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *CallMetricData) GetNumCallsFinishedWithMetric() int64 {
	if x != nil {
		return x.NumCallsFinishedWithMetric
	}
	return 0
}

func (x *CallMetricData) GetTotalMetricValue() float64 {
	if x != nil {
		return x.TotalMetricValue
	}
	return 0
}

type OrphanedLoadIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The load_key from the initial_request from the originating balancer.
	LoadKey []byte `protobuf:"bytes,1,opt,name=load_key,json=loadKey,proto3" json:"load_key,omitempty"`
	// The unique WorkloadID generated by LoadReporter to identify balancers. Here it
	// distinguishes orphaned load with a same load_key.
	LoadBalancerId string `protobuf:"bytes,2,opt,name=load_balancer_id,json=loadBalancerId,proto3" json:"load_balancer_id,omitempty"`
}

func (x *OrphanedLoadIdentifier) Reset() {
	*x = OrphanedLoadIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_lb_v1_load_reporter_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrphanedLoadIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrphanedLoadIdentifier) ProtoMessage() {}

func (x *OrphanedLoadIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_lb_v1_load_reporter_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrphanedLoadIdentifier.ProtoReflect.Descriptor instead.
func (*OrphanedLoadIdentifier) Descriptor() ([]byte, []int) {
	return file_grpc_lb_v1_load_reporter_proto_rawDescGZIP(), []int{7}
}

func (x *OrphanedLoadIdentifier) GetLoadKey() []byte {
	if x != nil {
		return x.LoadKey
	}
	return nil
}

func (x *OrphanedLoadIdentifier) GetLoadBalancerId() string {
	if x != nil {
		return x.LoadBalancerId
	}
	return ""
}

var File_grpc_lb_v1_load_reporter_proto protoreflect.FileDescriptor

var file_grpc_lb_v1_load_reporter_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x6c, 0x62, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0a, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6c, 0x62, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x62, 0x0a, 0x11,
	0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4d, 0x0a, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x6c, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xb8, 0x01, 0x0a, 0x18, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a,
	0x16, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x4b,
	0x0a, 0x14, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xe7, 0x01, 0x0a, 0x12,
	0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x6c, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x17, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6c, 0x62, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67,
	0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x15, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x24, 0x0a, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x6c, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x52,
	0x04, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xa6, 0x02, 0x0a, 0x19, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x64, 0x12, 0x6b, 0x0a,
	0x11, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x6c, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x10, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x4b, 0x0a, 0x18, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x10, 0x49, 0x4d, 0x50, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x50, 0x50, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x4a, 0x41, 0x56, 0x41, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x4f, 0x10, 0x03, 0x22, 0x9c,
	0x01, 0x0a, 0x15, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67,
	0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x6c, 0x6c, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0xe2, 0x06,
	0x0a, 0x04, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x67,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x33, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x69,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x46, 0x0a, 0x20, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1c, 0x6e, 0x75, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x40,
	0x0a, 0x1d, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x4d, 0x0a, 0x24, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1f,
	0x6e, 0x75, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6c, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x02, 0x18, 0x01, 0x48, 0x01,
	0x52, 0x07, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x65, 0x79, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x5e, 0x0a, 0x18, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x65,
	0x64, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6c,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x65, 0x64, 0x4c, 0x6f, 0x61,
	0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x01, 0x52, 0x16, 0x6f,
	0x72, 0x70, 0x68, 0x61, 0x6e, 0x65, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x14, 0x0a, 0x12, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x6f,
	0x72, 0x70, 0x68, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x4a, 0x04, 0x08, 0x02,
	0x10, 0x03, 0x22, 0xa3, 0x01, 0x0a, 0x0e, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a,
	0x6e, 0x75, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5d, 0x0a, 0x16, 0x4f, 0x72, 0x70, 0x68,
	0x61, 0x6e, 0x65, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a,
	0x10, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x64, 0x32, 0x61, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6c, 0x62, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6c, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x6d,
	0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x6c, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpc_lb_v1_load_reporter_proto_rawDescOnce sync.Once
	file_grpc_lb_v1_load_reporter_proto_rawDescData = file_grpc_lb_v1_load_reporter_proto_rawDesc
)

func file_grpc_lb_v1_load_reporter_proto_rawDescGZIP() []byte {
	file_grpc_lb_v1_load_reporter_proto_rawDescOnce.Do(func() {
		file_grpc_lb_v1_load_reporter_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_lb_v1_load_reporter_proto_rawDescData)
	})
	return file_grpc_lb_v1_load_reporter_proto_rawDescData
}

var file_grpc_lb_v1_load_reporter_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_grpc_lb_v1_load_reporter_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_grpc_lb_v1_load_reporter_proto_goTypes = []interface{}{
	(InitialLoadReportResponse_ImplementationIdentifier)(0), // 0: grpc.lb.v1.InitialLoadReportResponse.ImplementationIdentifier
	(*LoadReportRequest)(nil),                               // 1: grpc.lb.v1.LoadReportRequest
	(*InitialLoadReportRequest)(nil),                        // 2: grpc.lb.v1.InitialLoadReportRequest
	(*LoadReportResponse)(nil),                              // 3: grpc.lb.v1.LoadReportResponse
	(*InitialLoadReportResponse)(nil),                       // 4: grpc.lb.v1.InitialLoadReportResponse
	(*LoadBalancingFeedback)(nil),                           // 5: grpc.lb.v1.LoadBalancingFeedback
	(*Load)(nil),                                            // 6: grpc.lb.v1.Load
	(*CallMetricData)(nil),                                  // 7: grpc.lb.v1.CallMetricData
	(*OrphanedLoadIdentifier)(nil),                          // 8: grpc.lb.v1.OrphanedLoadIdentifier
	(*durationpb.Duration)(nil),                             // 9: google.protobuf.Duration
}
var file_grpc_lb_v1_load_reporter_proto_depIdxs = []int32{
	2,  // 0: grpc.lb.v1.LoadReportRequest.initial_request:type_name -> grpc.lb.v1.InitialLoadReportRequest
	9,  // 1: grpc.lb.v1.InitialLoadReportRequest.load_report_interval:type_name -> google.protobuf.Duration
	4,  // 2: grpc.lb.v1.LoadReportResponse.initial_response:type_name -> grpc.lb.v1.InitialLoadReportResponse
	5,  // 3: grpc.lb.v1.LoadReportResponse.load_balancing_feedback:type_name -> grpc.lb.v1.LoadBalancingFeedback
	6,  // 4: grpc.lb.v1.LoadReportResponse.load:type_name -> grpc.lb.v1.Load
	0,  // 5: grpc.lb.v1.InitialLoadReportResponse.implementation_id:type_name -> grpc.lb.v1.InitialLoadReportResponse.ImplementationIdentifier
	9,  // 6: grpc.lb.v1.Load.total_latency:type_name -> google.protobuf.Duration
	7,  // 7: grpc.lb.v1.Load.metric_data:type_name -> grpc.lb.v1.CallMetricData
	8,  // 8: grpc.lb.v1.Load.orphaned_load_identifier:type_name -> grpc.lb.v1.OrphanedLoadIdentifier
	1,  // 9: grpc.lb.v1.LoadReporter.ReportLoad:input_type -> grpc.lb.v1.LoadReportRequest
	3,  // 10: grpc.lb.v1.LoadReporter.ReportLoad:output_type -> grpc.lb.v1.LoadReportResponse
	10, // [10:11] is the sub-list for method output_type
	9,  // [9:10] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_grpc_lb_v1_load_reporter_proto_init() }
func file_grpc_lb_v1_load_reporter_proto_init() {
	if File_grpc_lb_v1_load_reporter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_grpc_lb_v1_load_reporter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_lb_v1_load_reporter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitialLoadReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_lb_v1_load_reporter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_lb_v1_load_reporter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitialLoadReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_lb_v1_load_reporter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancingFeedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_lb_v1_load_reporter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Load); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_lb_v1_load_reporter_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallMetricData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_lb_v1_load_reporter_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrphanedLoadIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_grpc_lb_v1_load_reporter_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Load_NumCallsInProgress)(nil),
		(*Load_LoadKey)(nil),
		(*Load_LoadKeyUnknown)(nil),
		(*Load_OrphanedLoadIdentifier)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_lb_v1_load_reporter_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpc_lb_v1_load_reporter_proto_goTypes,
		DependencyIndexes: file_grpc_lb_v1_load_reporter_proto_depIdxs,
		EnumInfos:         file_grpc_lb_v1_load_reporter_proto_enumTypes,
		MessageInfos:      file_grpc_lb_v1_load_reporter_proto_msgTypes,
	}.Build()
	File_grpc_lb_v1_load_reporter_proto = out.File
	file_grpc_lb_v1_load_reporter_proto_rawDesc = nil
	file_grpc_lb_v1_load_reporter_proto_goTypes = nil
	file_grpc_lb_v1_load_reporter_proto_depIdxs = nil
}
