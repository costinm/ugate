// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: grpc/lb/v1/load_reporter.proto

package lb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoadReporterClient is the client API for LoadReporter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoadReporterClient interface {
	// Report load from server to lb.
	ReportLoad(ctx context.Context, opts ...grpc.CallOption) (LoadReporter_ReportLoadClient, error)
}

type loadReporterClient struct {
	cc grpc.ClientConnInterface
}

func NewLoadReporterClient(cc grpc.ClientConnInterface) LoadReporterClient {
	return &loadReporterClient{cc}
}

func (c *loadReporterClient) ReportLoad(ctx context.Context, opts ...grpc.CallOption) (LoadReporter_ReportLoadClient, error) {
	stream, err := c.cc.NewStream(ctx, &LoadReporter_ServiceDesc.Streams[0], "/grpc.lb.v1.LoadReporter/ReportLoad", opts...)
	if err != nil {
		return nil, err
	}
	x := &loadReporterReportLoadClient{stream}
	return x, nil
}

type LoadReporter_ReportLoadClient interface {
	Send(*LoadReportRequest) error
	Recv() (*LoadReportResponse, error)
	grpc.ClientStream
}

type loadReporterReportLoadClient struct {
	grpc.ClientStream
}

func (x *loadReporterReportLoadClient) Send(m *LoadReportRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *loadReporterReportLoadClient) Recv() (*LoadReportResponse, error) {
	m := new(LoadReportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LoadReporterServer is the server API for LoadReporter service.
// All implementations should embed UnimplementedLoadReporterServer
// for forward compatibility
type LoadReporterServer interface {
	// Report load from server to lb.
	ReportLoad(LoadReporter_ReportLoadServer) error
}

// UnimplementedLoadReporterServer should be embedded to have forward compatible implementations.
type UnimplementedLoadReporterServer struct {
}

func (UnimplementedLoadReporterServer) ReportLoad(LoadReporter_ReportLoadServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportLoad not implemented")
}

// UnsafeLoadReporterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoadReporterServer will
// result in compilation errors.
type UnsafeLoadReporterServer interface {
	mustEmbedUnimplementedLoadReporterServer()
}

func RegisterLoadReporterServer(s grpc.ServiceRegistrar, srv LoadReporterServer) {
	s.RegisterService(&LoadReporter_ServiceDesc, srv)
}

func _LoadReporter_ReportLoad_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LoadReporterServer).ReportLoad(&loadReporterReportLoadServer{stream})
}

type LoadReporter_ReportLoadServer interface {
	Send(*LoadReportResponse) error
	Recv() (*LoadReportRequest, error)
	grpc.ServerStream
}

type loadReporterReportLoadServer struct {
	grpc.ServerStream
}

func (x *loadReporterReportLoadServer) Send(m *LoadReportResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *loadReporterReportLoadServer) Recv() (*LoadReportRequest, error) {
	m := new(LoadReportRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LoadReporter_ServiceDesc is the grpc.ServiceDesc for LoadReporter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoadReporter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.lb.v1.LoadReporter",
	HandlerType: (*LoadReporterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReportLoad",
			Handler:       _LoadReporter_ReportLoad_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/lb/v1/load_reporter.proto",
}
