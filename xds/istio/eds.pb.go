// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/costinm/dmesh/dm/istio/eds.proto

package istio

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SocketAddress_Protocol int32

const (
	SocketAddress_TCP SocketAddress_Protocol = 0
	// [#not-implemented-hide:]
	SocketAddress_UDP SocketAddress_Protocol = 1
)

var SocketAddress_Protocol_name = map[int32]string{
	0: "TCP",
	1: "UDP",
}
var SocketAddress_Protocol_value = map[string]int32{
	"TCP": 0,
	"UDP": 1,
}

func (x SocketAddress_Protocol) String() string {
	return proto.EnumName(SocketAddress_Protocol_name, int32(x))
}
func (SocketAddress_Protocol) EnumDescriptor() ([]byte, []int) { return fileDescriptorEds, []int{2, 0} }

// Addresses specify either a logical or physical address and port, which are
// used to tell Envoy where to bind/listen, connect to upstream and find
// management servers.
type Address struct {
	// Types that are valid to be assigned to Address:
	//	*Address_SocketAddress
	//	*Address_Pipe
	Address isAddress_Address `protobuf_oneof:"address"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptorEds, []int{0} }

type isAddress_Address interface {
	isAddress_Address()
}

type Address_SocketAddress struct {
	SocketAddress *SocketAddress `protobuf:"bytes,1,opt,name=socket_address,oneof"`
}
type Address_Pipe struct {
	Pipe *Pipe `protobuf:"bytes,2,opt,name=pipe,oneof"`
}

func (*Address_SocketAddress) isAddress_Address() {}
func (*Address_Pipe) isAddress_Address()          {}

func (m *Address) GetAddress() isAddress_Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Address) GetSocketAddress() *SocketAddress {
	if x, ok := m.GetAddress().(*Address_SocketAddress); ok {
		return x.SocketAddress
	}
	return nil
}

func (m *Address) GetPipe() *Pipe {
	if x, ok := m.GetAddress().(*Address_Pipe); ok {
		return x.Pipe
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Address) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Address_OneofMarshaler, _Address_OneofUnmarshaler, _Address_OneofSizer, []interface{}{
		(*Address_SocketAddress)(nil),
		(*Address_Pipe)(nil),
	}
}

func _Address_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Address)
	// address
	switch x := m.Address.(type) {
	case *Address_SocketAddress:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SocketAddress); err != nil {
			return err
		}
	case *Address_Pipe:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pipe); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Address.Address has unexpected type %T", x)
	}
	return nil
}

func _Address_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Address)
	switch tag {
	case 1: // address.socket_address
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SocketAddress)
		err := b.DecodeMessage(msg)
		m.Address = &Address_SocketAddress{msg}
		return true, err
	case 2: // address.pipe
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Pipe)
		err := b.DecodeMessage(msg)
		m.Address = &Address_Pipe{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Address_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Address)
	// address
	switch x := m.Address.(type) {
	case *Address_SocketAddress:
		s := proto.Size(x.SocketAddress)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Address_Pipe:
		s := proto.Size(x.Pipe)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Pipe struct {
	// Unix Domain Socket path. On Linux, paths starting with '@' will use the
	// abstract namespace. The starting '@' is replaced by a null byte by Envoy.
	// Paths starting with '@' will result in an error in environments other than
	// Linux.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *Pipe) Reset()                    { *m = Pipe{} }
func (m *Pipe) String() string            { return proto.CompactTextString(m) }
func (*Pipe) ProtoMessage()               {}
func (*Pipe) Descriptor() ([]byte, []int) { return fileDescriptorEds, []int{1} }

func (m *Pipe) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type SocketAddress struct {
	Protocol SocketAddress_Protocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=istio.SocketAddress_Protocol" json:"protocol,omitempty"`
	// The address for this socket. :ref:`Listeners <config_listeners>` will bind
	// to the address or outbound connections will be made. An empty address is
	// not allowed, specify ``0.0.0.0`` or ``::`` to bind any. It's still possible to
	// distinguish on an address via the prefix/suffix matching in
	// FilterChainMatch after connection. For :ref:`clusters
	// <config_cluster_manager_cluster>`, an address may be either an IP or
	// hostname to be resolved via DNS. If it is a hostname, :ref:`resolver_name
	// <envoy_api_field_core.SocketAddress.resolver_name>` should be set unless default
	// (i.e. DNS) resolution is expected.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Types that are valid to be assigned to PortSpecifier:
	//	*SocketAddress_PortValue
	//	*SocketAddress_NamedPort
	PortSpecifier isSocketAddress_PortSpecifier `protobuf_oneof:"port_specifier"`
	// The name of the resolver. This must have been registered with Envoy. If this is
	// empty, a context dependent default applies. If address is a hostname this
	// should be set for resolution other than DNS. If the address is a concrete
	// IP address, no resolution will occur.
	ResolverName string `protobuf:"bytes,5,opt,name=resolver_name,proto3" json:"resolver_name,omitempty"`
	// When binding to an IPv6 address above, this enables `IPv4 compatibity
	// <https://tools.ietf.org/html/rfc3493#page-11>`_. Binding to ``::`` will
	// allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into
	// IPv6 space as ``::FFFF:<IPv4-address>``.
	Ipv4Compat bool `protobuf:"varint,6,opt,name=ipv4_compat,proto3" json:"ipv4_compat,omitempty"`
}

func (m *SocketAddress) Reset()                    { *m = SocketAddress{} }
func (m *SocketAddress) String() string            { return proto.CompactTextString(m) }
func (*SocketAddress) ProtoMessage()               {}
func (*SocketAddress) Descriptor() ([]byte, []int) { return fileDescriptorEds, []int{2} }

type isSocketAddress_PortSpecifier interface {
	isSocketAddress_PortSpecifier()
}

type SocketAddress_PortValue struct {
	PortValue uint32 `protobuf:"varint,3,opt,name=port_value,proto3,oneof"`
}
type SocketAddress_NamedPort struct {
	NamedPort string `protobuf:"bytes,4,opt,name=named_port,proto3,oneof"`
}

func (*SocketAddress_PortValue) isSocketAddress_PortSpecifier() {}
func (*SocketAddress_NamedPort) isSocketAddress_PortSpecifier() {}

func (m *SocketAddress) GetPortSpecifier() isSocketAddress_PortSpecifier {
	if m != nil {
		return m.PortSpecifier
	}
	return nil
}

func (m *SocketAddress) GetProtocol() SocketAddress_Protocol {
	if m != nil {
		return m.Protocol
	}
	return SocketAddress_TCP
}

func (m *SocketAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SocketAddress) GetPortValue() uint32 {
	if x, ok := m.GetPortSpecifier().(*SocketAddress_PortValue); ok {
		return x.PortValue
	}
	return 0
}

func (m *SocketAddress) GetNamedPort() string {
	if x, ok := m.GetPortSpecifier().(*SocketAddress_NamedPort); ok {
		return x.NamedPort
	}
	return ""
}

func (m *SocketAddress) GetResolverName() string {
	if m != nil {
		return m.ResolverName
	}
	return ""
}

func (m *SocketAddress) GetIpv4Compat() bool {
	if m != nil {
		return m.Ipv4Compat
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SocketAddress) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SocketAddress_OneofMarshaler, _SocketAddress_OneofUnmarshaler, _SocketAddress_OneofSizer, []interface{}{
		(*SocketAddress_PortValue)(nil),
		(*SocketAddress_NamedPort)(nil),
	}
}

func _SocketAddress_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SocketAddress)
	// port_specifier
	switch x := m.PortSpecifier.(type) {
	case *SocketAddress_PortValue:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.PortValue))
	case *SocketAddress_NamedPort:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.NamedPort)
	case nil:
	default:
		return fmt.Errorf("SocketAddress.PortSpecifier has unexpected type %T", x)
	}
	return nil
}

func _SocketAddress_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SocketAddress)
	switch tag {
	case 3: // port_specifier.port_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.PortSpecifier = &SocketAddress_PortValue{uint32(x)}
		return true, err
	case 4: // port_specifier.named_port
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.PortSpecifier = &SocketAddress_NamedPort{x}
		return true, err
	default:
		return false, nil
	}
}

func _SocketAddress_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SocketAddress)
	// port_specifier
	switch x := m.PortSpecifier.(type) {
	case *SocketAddress_PortValue:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.PortValue))
	case *SocketAddress_NamedPort:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.NamedPort)))
		n += len(x.NamedPort)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type BindConfig struct {
	// The address to bind to when creating a socket.
	SourceAddress *SocketAddress `protobuf:"bytes,1,opt,name=source_address" json:"source_address,omitempty"`
}

func (m *BindConfig) Reset()                    { *m = BindConfig{} }
func (m *BindConfig) String() string            { return proto.CompactTextString(m) }
func (*BindConfig) ProtoMessage()               {}
func (*BindConfig) Descriptor() ([]byte, []int) { return fileDescriptorEds, []int{3} }

func (m *BindConfig) GetSourceAddress() *SocketAddress {
	if m != nil {
		return m.SourceAddress
	}
	return nil
}

// CidrRange specifies an IP Address and a prefix length to construct
// the subnet mask for a `CIDR <https://tools.ietf.org/html/rfc4632>`_ range.
type CidrRange struct {
	// IPv4 or IPv6 address, e.g. ``192.0.0.0`` or ``2001:db8::``.
	AddressPrefix string `protobuf:"bytes,1,opt,name=address_prefix,proto3" json:"address_prefix,omitempty"`
	// Length of prefix, e.g. 0, 32.
	PrefixLen *UInt32Value `protobuf:"bytes,2,opt,name=prefix_len" json:"prefix_len,omitempty"`
}

func (m *CidrRange) Reset()                    { *m = CidrRange{} }
func (m *CidrRange) String() string            { return proto.CompactTextString(m) }
func (*CidrRange) ProtoMessage()               {}
func (*CidrRange) Descriptor() ([]byte, []int) { return fileDescriptorEds, []int{4} }

func (m *CidrRange) GetAddressPrefix() string {
	if m != nil {
		return m.AddressPrefix
	}
	return ""
}

func (m *CidrRange) GetPrefixLen() *UInt32Value {
	if m != nil {
		return m.PrefixLen
	}
	return nil
}

// Upstream host identifier.
type Endpoint struct {
	Address *Address `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *Endpoint) Reset()                    { *m = Endpoint{} }
func (m *Endpoint) String() string            { return proto.CompactTextString(m) }
func (*Endpoint) ProtoMessage()               {}
func (*Endpoint) Descriptor() ([]byte, []int) { return fileDescriptorEds, []int{5} }

func (m *Endpoint) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

// An Endpoint that Envoy can route traffic to.
type LbEndpoint struct {
	// Upstream host identifier
	Endpoint *Endpoint `protobuf:"bytes,1,opt,name=endpoint" json:"endpoint,omitempty"`
	// The endpoint metadata specifies values that may be used by the load
	// balancer to select endpoints in a cluster for a given request. The filter
	// name should be specified as *envoy.lb*. An example boolean key-value pair
	// is *canary*, providing the optional canary status of the upstream host.
	// This may be matched against in a route's ForwardAction metadata_match field
	// to subset the endpoints considered in cluster load balancing.
	Metadata *Metadata `protobuf:"bytes,3,opt,name=metadata" json:"metadata,omitempty"`
	// The optional load balancing weight of the upstream host, in the range 1 -
	// 128. Envoy uses the load balancing weight in some of the built in load
	// balancers. The load balancing weight for an endpoint is divided by the sum
	// of the weights of all endpoints in the endpoint's locality to produce a
	// percentage of traffic for the endpoint. This percentage is then further
	// weighted by the endpoint's locality's load balancing weight from
	// LocalityLbEndpoints. If unspecified, each host is presumed to have equal
	// weight in a locality.
	//
	// .. attention::
	//
	//   The limit of 128 is somewhat arbitrary, but is applied due to performance
	//   concerns with the current implementation and can be removed when
	//   `this issue <https://github.com/envoyproxy/envoy/issues/1285>`_ is fixed.
	LoadBalancingWeight *UInt32Value `protobuf:"bytes,4,opt,name=load_balancing_weight" json:"load_balancing_weight,omitempty"`
}

func (m *LbEndpoint) Reset()                    { *m = LbEndpoint{} }
func (m *LbEndpoint) String() string            { return proto.CompactTextString(m) }
func (*LbEndpoint) ProtoMessage()               {}
func (*LbEndpoint) Descriptor() ([]byte, []int) { return fileDescriptorEds, []int{6} }

func (m *LbEndpoint) GetEndpoint() *Endpoint {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

func (m *LbEndpoint) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *LbEndpoint) GetLoadBalancingWeight() *UInt32Value {
	if m != nil {
		return m.LoadBalancingWeight
	}
	return nil
}

// A group of endpoints belonging to a Locality.
// One can have multiple LocalityLbEndpoints for a locality, but this is
// generally only done if the different groups need to have different load
// balancing weights or different priorities.
type LocalityLbEndpoints struct {
	// Identifies location of where the upstream hosts run.
	Locality *Locality `protobuf:"bytes,1,opt,name=locality" json:"locality,omitempty"`
	// The group of endpoints belonging to the locality specified.
	LbEndpoints []*LbEndpoint `protobuf:"bytes,2,rep,name=lb_endpoints" json:"lb_endpoints,omitempty"`
	// Optional: Per priority/region/zone/sub_zone weight - range 1-128. The load
	// balancing weight for a locality is divided by the sum of the weights of all
	// localities  at the same priority level to produce the effective percentage
	// of traffic for the locality.
	//
	// Weights must be specified for either all localities in a given priority
	// level or none.
	//
	// If unspecified, each locality is presumed to have equal weight in a
	// cluster.
	//
	// .. attention::
	//
	//   The limit of 128 is somewhat arbitrary, but is applied due to performance
	//   concerns with the current implementation and can be removed when
	//   `this issue <https://github.com/envoyproxy/envoy/issues/1285>`_ is fixed.
	LoadBalancingWeight *UInt32Value `protobuf:"bytes,3,opt,name=load_balancing_weight" json:"load_balancing_weight,omitempty"`
	// Optional: the priority for this LocalityLbEndpoints. If unspecified this will
	// default to the highest priority (0).
	//
	// Under usual circumstances, Envoy will only select endpoints for the highest
	// priority (0). In the event all endpoints for a particular priority are
	// unavailable/unhealthy, Envoy will fail over to selecting endpoints for the
	// next highest priority group.
	//
	// Priorities should range from 0 (highest) to N (lowest) without skipping.
	Priority uint32 `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (m *LocalityLbEndpoints) Reset()                    { *m = LocalityLbEndpoints{} }
func (m *LocalityLbEndpoints) String() string            { return proto.CompactTextString(m) }
func (*LocalityLbEndpoints) ProtoMessage()               {}
func (*LocalityLbEndpoints) Descriptor() ([]byte, []int) { return fileDescriptorEds, []int{7} }

func (m *LocalityLbEndpoints) GetLocality() *Locality {
	if m != nil {
		return m.Locality
	}
	return nil
}

func (m *LocalityLbEndpoints) GetLbEndpoints() []*LbEndpoint {
	if m != nil {
		return m.LbEndpoints
	}
	return nil
}

func (m *LocalityLbEndpoints) GetLoadBalancingWeight() *UInt32Value {
	if m != nil {
		return m.LoadBalancingWeight
	}
	return nil
}

func (m *LocalityLbEndpoints) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

// Metadata provides additional inputs to filters based on matched listeners,
// filter chains, routes and endpoints. It is structured as a map from filter
// name (in reverse DNS format) to metadata specific to the filter. Metadata
// key-values for a filter are merged as connection and request handling occurs,
// with later values for the same key overriding earlier values.
//
// An example use of metadata is providing additional values to
// http_connection_manager in the envoy.http_connection_manager.access_log
// namespace.
//
// For load balancing, Metadata provides a means to subset cluster endpoints.
// Endpoints have a Metadata object associated and routes contain a Metadata
// object to match against. There are some well defined metadata used today for
// this purpose:
//
// * ``{"envoy.lb": {"canary": <bool> }}`` This indicates the canary status of an
//   endpoint and is also used during header processing
//   (x-envoy-upstream-canary) and for stats purposes.
type Metadata struct {
	// Key is the reverse DNS filter name, e.g. com.acme.widget. The envoy.*
	// namespace is reserved for Envoy's built-in filters.
	FilterMetadata map[string]*Struct `protobuf:"bytes,1,rep,name=filter_metadata" json:"filter_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptorEds, []int{8} }

func (m *Metadata) GetFilterMetadata() map[string]*Struct {
	if m != nil {
		return m.FilterMetadata
	}
	return nil
}

// Each route from RDS will map to a single cluster or traffic split across
// clusters using weights expressed in the RDS WeightedCluster.
//
// With EDS, each cluster is treated independently from a LB perspective, with
// LB taking place between the Localities within a cluster and at a finer
// granularity between the hosts within a locality. For a given cluster, the
// effective weight of a host is its load_balancing_weight multiplied by the
// load_balancing_weight of its Locality.
type ClusterLoadAssignment struct {
	// Name of the cluster. This will be the :ref:`service_name
	// <envoy_api_field_Cluster.EdsClusterConfig.service_name>` value if specified
	// in the cluster :ref:`EdsClusterConfig
	// <envoy_api_msg_Cluster.EdsClusterConfig>`.
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,proto3" json:"cluster_name,omitempty"`
	// List of endpoints to load balance to.
	Endpoints []*LocalityLbEndpoints `protobuf:"bytes,2,rep,name=endpoints" json:"endpoints,omitempty"`
}

func (m *ClusterLoadAssignment) Reset()                    { *m = ClusterLoadAssignment{} }
func (m *ClusterLoadAssignment) String() string            { return proto.CompactTextString(m) }
func (*ClusterLoadAssignment) ProtoMessage()               {}
func (*ClusterLoadAssignment) Descriptor() ([]byte, []int) { return fileDescriptorEds, []int{9} }

func (m *ClusterLoadAssignment) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *ClusterLoadAssignment) GetEndpoints() []*LocalityLbEndpoints {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

func init() {
	proto.RegisterType((*Address)(nil), "istio.Address")
	proto.RegisterType((*Pipe)(nil), "istio.Pipe")
	proto.RegisterType((*SocketAddress)(nil), "istio.SocketAddress")
	proto.RegisterType((*BindConfig)(nil), "istio.BindConfig")
	proto.RegisterType((*CidrRange)(nil), "istio.CidrRange")
	proto.RegisterType((*Endpoint)(nil), "istio.Endpoint")
	proto.RegisterType((*LbEndpoint)(nil), "istio.LbEndpoint")
	proto.RegisterType((*LocalityLbEndpoints)(nil), "istio.LocalityLbEndpoints")
	proto.RegisterType((*Metadata)(nil), "istio.Metadata")
	proto.RegisterType((*ClusterLoadAssignment)(nil), "istio.ClusterLoadAssignment")
	proto.RegisterEnum("istio.SocketAddress_Protocol", SocketAddress_Protocol_name, SocketAddress_Protocol_value)
}

func init() { proto.RegisterFile("github.com/costinm/dmesh/dm/istio/eds.proto", fileDescriptorEds) }

var fileDescriptorEds = []byte{
	// 634 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x51, 0x6f, 0x12, 0x4d,
	0x14, 0x65, 0x0a, 0x6d, 0xe1, 0x52, 0x28, 0xdf, 0x94, 0x7e, 0x21, 0x7c, 0xfd, 0x62, 0x5d, 0x13,
	0x25, 0x69, 0x5d, 0x22, 0xf5, 0xc1, 0x34, 0xbe, 0x14, 0x5a, 0x83, 0xb1, 0x26, 0x44, 0xad, 0x0f,
	0xc6, 0x64, 0x33, 0xec, 0x0e, 0x30, 0xe9, 0xee, 0xcc, 0x66, 0x66, 0x40, 0xf9, 0x01, 0x26, 0x3e,
	0xf9, 0x33, 0xfc, 0x4f, 0xfe, 0x1b, 0x33, 0xb3, 0x03, 0x54, 0xd2, 0xc6, 0xbe, 0xed, 0xde, 0x7b,
	0xce, 0x3d, 0x67, 0xcf, 0xbd, 0x00, 0x47, 0x63, 0xa6, 0x27, 0xd3, 0xa1, 0x1f, 0x8a, 0xa4, 0x1d,
	0x0a, 0xa5, 0x19, 0x4f, 0xda, 0x51, 0x42, 0xd5, 0xa4, 0x1d, 0x25, 0x6d, 0xa6, 0x34, 0x13, 0x6d,
	0x1a, 0x29, 0x3f, 0x95, 0x42, 0x0b, 0xbc, 0x69, 0x0b, 0xcd, 0xe3, 0xbf, 0x73, 0x86, 0x44, 0xd1,
	0x8c, 0xd4, 0xec, 0xdc, 0x43, 0x81, 0xcf, 0xc4, 0x3c, 0x58, 0x71, 0x3c, 0x02, 0xdb, 0x67, 0x51,
	0x24, 0xa9, 0x52, 0xd8, 0x87, 0xaa, 0x12, 0xe1, 0x35, 0xd5, 0x01, 0xc9, 0x2a, 0x0d, 0x74, 0x88,
	0x5a, 0xe5, 0x4e, 0xdd, 0xb7, 0x5c, 0xff, 0xbd, 0x6d, 0x3a, 0x74, 0x3f, 0x87, 0xff, 0x83, 0x42,
	0xca, 0x52, 0xda, 0xd8, 0xb0, 0xa8, 0xb2, 0x43, 0x0d, 0x58, 0x4a, 0xfb, 0xb9, 0x6e, 0x09, 0xb6,
	0xdd, 0x14, 0xaf, 0x0e, 0x05, 0x53, 0xc4, 0x3b, 0x50, 0x48, 0x89, 0x9e, 0xd8, 0xa9, 0x25, 0xef,
	0x17, 0x82, 0xca, 0x1f, 0x13, 0x71, 0x1b, 0x8a, 0xd6, 0x53, 0x28, 0x62, 0x8b, 0xa9, 0x76, 0xfe,
	0xbf, 0x4d, 0xd9, 0x1f, 0x38, 0x10, 0xde, 0x5d, 0x6a, 0x58, 0x0f, 0x25, 0x5c, 0x07, 0x48, 0x85,
	0xd4, 0xc1, 0x8c, 0xc4, 0x53, 0xda, 0xc8, 0x1f, 0xa2, 0x56, 0xa5, 0x9f, 0x33, 0x55, 0x4e, 0x12,
	0x1a, 0x05, 0xa6, 0xd7, 0x28, 0x18, 0x64, 0x3f, 0x87, 0xf7, 0xa1, 0x22, 0xa9, 0x12, 0xf1, 0x8c,
	0xca, 0xc0, 0xb4, 0x1b, 0x9b, 0x76, 0xc4, 0x1e, 0x94, 0x59, 0x3a, 0x7b, 0x1e, 0x84, 0x22, 0x49,
	0x89, 0x6e, 0x6c, 0x1d, 0xa2, 0x56, 0xd1, 0x3b, 0x80, 0xe2, 0x52, 0x74, 0x1b, 0xf2, 0x1f, 0x7a,
	0x83, 0x5a, 0xce, 0x3c, 0x5c, 0x9d, 0x0f, 0x6a, 0xa8, 0x5b, 0x83, 0xaa, 0x55, 0x55, 0x29, 0x0d,
	0xd9, 0x88, 0x51, 0xe9, 0x9d, 0x02, 0x74, 0x19, 0x8f, 0x7a, 0x82, 0x8f, 0xd8, 0x18, 0x1f, 0x9b,
	0x5c, 0xa7, 0x32, 0xa4, 0xf7, 0xc9, 0xd5, 0x7b, 0x03, 0xa5, 0x1e, 0x8b, 0xe4, 0x3b, 0xc2, 0xc7,
	0x14, 0xff, 0x0b, 0x55, 0xc7, 0x09, 0x52, 0x49, 0x47, 0xec, 0x6b, 0x16, 0x1e, 0x7e, 0x0c, 0x90,
	0xbd, 0x07, 0x31, 0xe5, 0x6e, 0x01, 0xd8, 0x8d, 0xbb, 0x7a, 0xcd, 0xf5, 0x49, 0xe7, 0xa3, 0x89,
	0xc0, 0x3b, 0x82, 0xe2, 0x05, 0x8f, 0x52, 0xc1, 0xb8, 0xc6, 0x0f, 0x56, 0x69, 0x65, 0xfa, 0x55,
	0x47, 0x58, 0x28, 0x7f, 0x43, 0x00, 0x97, 0xc3, 0x25, 0xfe, 0x21, 0x14, 0xa9, 0x7b, 0x76, 0x84,
	0x5d, 0x47, 0xb8, 0x09, 0x49, 0xa8, 0x26, 0x11, 0xd1, 0xc4, 0xa6, 0xbd, 0x82, 0xbc, 0x75, 0x65,
	0xfc, 0x0c, 0xf6, 0x63, 0x41, 0xa2, 0x60, 0x48, 0x62, 0xc2, 0x43, 0xc6, 0xc7, 0xc1, 0x17, 0xca,
	0xc6, 0x93, 0x6c, 0x0f, 0xb7, 0x9b, 0xfe, 0x89, 0x60, 0xef, 0x52, 0x84, 0x24, 0x66, 0x7a, 0xbe,
	0xf2, 0xa3, 0x8c, 0x5a, 0xec, 0xca, 0x6b, 0x86, 0x16, 0x68, 0xfc, 0x04, 0x76, 0xe2, 0x61, 0xb0,
	0xb0, 0x6d, 0xce, 0x22, 0xdf, 0x2a, 0x77, 0xfe, 0x59, 0xc0, 0x56, 0x1f, 0x77, 0xa7, 0xad, 0xfc,
	0x5d, 0xb6, 0x70, 0xcd, 0x9c, 0x27, 0x13, 0xd2, 0xc8, 0x9b, 0x5b, 0xa9, 0x78, 0x3f, 0x10, 0x14,
	0x97, 0x1f, 0xfa, 0x12, 0x76, 0x47, 0x2c, 0xd6, 0x54, 0x06, 0xcb, 0x48, 0x90, 0x55, 0x7f, 0xb4,
	0x16, 0x89, 0xff, 0xca, 0xc2, 0x16, 0xaf, 0x17, 0x5c, 0xcb, 0x79, 0xf3, 0x1c, 0xf6, 0x6e, 0x29,
	0xe3, 0x32, 0xe4, 0xaf, 0xe9, 0xdc, 0x2d, 0xfd, 0x00, 0x36, 0xb3, 0xc3, 0xce, 0xf6, 0x5d, 0x59,
	0x9c, 0x8f, 0x96, 0xd3, 0x50, 0x9f, 0x6e, 0xbc, 0x40, 0xde, 0x67, 0xd8, 0xef, 0xc5, 0x53, 0xa5,
	0xa9, 0xbc, 0x14, 0x24, 0x3a, 0x53, 0x8a, 0x8d, 0x79, 0x42, 0xb9, 0xc6, 0x75, 0xd8, 0x09, 0xb3,
	0x46, 0x76, 0xeb, 0xd9, 0xc0, 0xa7, 0x50, 0x5a, 0x8f, 0xaa, 0xb9, 0x96, 0xe8, 0x8d, 0xfc, 0xbb,
	0xf0, 0x29, 0xfb, 0x57, 0xfa, 0x8e, 0xd0, 0x70, 0xcb, 0xfe, 0x52, 0x4f, 0x7e, 0x07, 0x00, 0x00,
	0xff, 0xff, 0xdd, 0x94, 0xb9, 0x69, 0xd5, 0x04, 0x00, 0x00,
}
