syntax = "proto3";

package istio;
option go_package = "istio";
option java_generic_services = true;


import "github.com/costinm/dmesh/dm/istio/base.proto";

// Identifies location of where either Envoy runs or where upstream hosts run.
message Locality {
    // Region this :ref:`zone <envoy_api_field_core.Locality.zone>` belongs to.
    string region = 1;

    // Defines the local service zone where Envoy is running. Though optional, it
    // should be set if discovery service routing is used and the discovery
    // service exposes :ref:`zone data <config_cluster_manager_sds_api_host_az>`,
    // either in this message or via :option:`--service-zone`. The meaning of zone
    // is context dependent, e.g. `Availability Zone (AZ)
    // <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html>`_
    // on AWS, `Zone <https://cloud.google.com/compute/docs/regions-zones/>`_ on
    // GCP, etc.
    string zone = 2;

    // When used for locality of upstream hosts, this field further splits zone
    // into smaller chunks of sub-zones so they can be load balanced
    // independently.
    string sub_zone = 3;
}

message SocketAddress {
    enum Protocol {
        TCP = 0;
        // [#not-implemented-hide:]
        UDP = 1;
    }
    Protocol protocol = 1;
    // The address for this socket. :ref:`Listeners <config_listeners>` will bind
    // to the address or outbound connections will be made. An empty address is
    // not allowed, specify ``0.0.0.0`` or ``::`` to bind any. It's still possible to
    // distinguish on an address via the prefix/suffix matching in
    // FilterChainMatch after connection. For :ref:`clusters
    // <config_cluster_manager_cluster>`, an address may be either an IP or
    // hostname to be resolved via DNS. If it is a hostname, :ref:`resolver_name
    // <envoy_api_field_core.SocketAddress.resolver_name>` should be set unless default
    // (i.e. DNS) resolution is expected.
    string address = 2;
    oneof port_specifier {
        uint32 port_value = 3;
        // This is only valid if :ref:`resolver_name
        // <envoy_api_field_core.SocketAddress.resolver_name>` is specified below and the
        // named resolver is capable of named port resolution.
        string named_port = 4;
    }
    // The name of the resolver. This must have been registered with Envoy. If this is
    // empty, a context dependent default applies. If address is a hostname this
    // should be set for resolution other than DNS. If the address is a concrete
    // IP address, no resolution will occur.
    string resolver_name = 5;

    // When binding to an IPv6 address above, this enables `IPv4 compatibity
    // <https://tools.ietf.org/html/rfc3493#page-11>`_. Binding to ``::`` will
    // allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into
    // IPv6 space as ``::FFFF:<IPv4-address>``.
    bool ipv4_compat = 6;
}

// Metadata provides additional inputs to filters based on matched listeners,
// filter chains, routes and endpoints. It is structured as a map from filter
// name (in reverse DNS format) to metadata specific to the filter. Metadata
// key-values for a filter are merged as connection and request handling occurs,
// with later values for the same key overriding earlier values.
//
// An example use of metadata is providing additional values to
// http_connection_manager in the envoy.http_connection_manager.access_log
// namespace.
//
// For load balancing, Metadata provides a means to subset cluster endpoints.
// Endpoints have a Metadata object associated and routes contain a Metadata
// object to match against. There are some well defined metadata used today for
// this purpose:
//
// * ``{"envoy.lb": {"canary": <bool> }}`` This indicates the canary status of an
//   endpoint and is also used during header processing
//   (x-envoy-upstream-canary) and for stats purposes.
message Metadata {
    // Key is the reverse DNS filter name, e.g. com.acme.widget. The envoy.*
    // namespace is reserved for Envoy's built-in filters.
    map<string, Struct> filter_metadata = 1;
}

// Addresses specify either a logical or physical address and port, which are
// used to tell Envoy where to bind/listen, connect to upstream and find
// management servers.
message Address {
    oneof address {
        SocketAddress socket_address = 1;
        Pipe pipe = 2;
    }
}

message Pipe {
    // Unix Domain Socket path. On Linux, paths starting with '@' will use the
    // abstract namespace. The starting '@' is replaced by a null byte by Envoy.
    // Paths starting with '@' will result in an error in environments other than
    // Linux.
    string path = 1;
}


message BindConfig {
    // The address to bind to when creating a socket.
    SocketAddress source_address = 1;
}

// CidrRange specifies an IP Address and a prefix length to construct
// the subnet mask for a `CIDR <https://tools.ietf.org/html/rfc4632>`_ range.
message CidrRange {
    // IPv4 or IPv6 address, e.g. ``192.0.0.0`` or ``2001:db8::``.
    string address_prefix = 1;
    // Length of prefix, e.g. 0, 32.
    UInt32Value prefix_len = 2;
}

